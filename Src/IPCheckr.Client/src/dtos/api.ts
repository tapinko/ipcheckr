/* tslint:disable */
/* eslint-disable */
/**
 * IPCheckr API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddUserReq
 */
export interface AddUserReq {
    /**
     * 
     * @type {string}
     * @memberof AddUserReq
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AddUserReq
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AddUserReq
     */
    'role': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof AddUserReq
     */
    'classIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface AddUserRes
 */
export interface AddUserRes {
    /**
     * 
     * @type {number}
     * @memberof AddUserRes
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface ApiProblemDetails
 */
export interface ApiProblemDetails {
    /**
     * 
     * @type {string}
     * @memberof ApiProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiProblemDetails
     */
    'instance'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiProblemDetails
     */
    'messageEn'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiProblemDetails
     */
    'messageSk'?: string;
    /**
     * 
     * @type {ApiProblemDetailsAllOfPayload}
     * @memberof ApiProblemDetails
     */
    'payload'?: ApiProblemDetailsAllOfPayload | null;
}
/**
 * @type ApiProblemDetailsAllOfPayload
 * @export
 */
export type ApiProblemDetailsAllOfPayload = UserConflictInfoDto;

/**
 * 
 * @export
 * @interface AppSettingDto
 */
export interface AppSettingDto {
    /**
     * 
     * @type {number}
     * @memberof AppSettingDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AppSettingDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AppSettingDto
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface AssignmentDto
 */
export interface AssignmentDto {
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'assignmentId': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'studentUsername': string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'studentId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'successRate': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'attemptCount': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AssignmentDto
     */
    'students'?: Array<number> | null;
    /**
     * 
     * @type {AssignmentGroupStatus}
     * @memberof AssignmentDto
     */
    'status': AssignmentGroupStatus;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'lastSubmit'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'teacherUsername': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'className': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'assignmentGroupDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'assignmentGroupName': string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'maxSuccessRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'maxAttempts': number;
    /**
     * 
     * @type {AssignmentGroupState}
     * @memberof AssignmentDto
     */
    'state': AssignmentGroupState;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'deadline': string;
}


/**
 * 
 * @export
 * @interface AssignmentGroupDto
 */
export interface AssignmentGroupDto {
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupDto
     */
    'assignmentGroupId': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentGroupDto
     */
    'assignmentGroupName': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentGroupDto
     */
    'assignmentGroupDescription'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupDto
     */
    'classId': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentGroupDto
     */
    'className': string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupDto
     */
    'submitted': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupDto
     */
    'total': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentGroupDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentGroupDto
     */
    'deadline': string;
    /**
     * 
     * @type {AssignmentGroupStatus}
     * @memberof AssignmentGroupDto
     */
    'submissionStatus': AssignmentGroupStatus;
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupDto
     */
    'successRate': number;
    /**
     * 
     * @type {AssignmentGroupState}
     * @memberof AssignmentGroupDto
     */
    'state': AssignmentGroupState;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const AssignmentGroupState = {
    Upcoming: 'UPCOMING',
    InProgress: 'IN_PROGRESS',
    Ended: 'ENDED'
} as const;

export type AssignmentGroupState = typeof AssignmentGroupState[keyof typeof AssignmentGroupState];


/**
 * 
 * @export
 * @enum {string}
 */

export const AssignmentGroupStatus = {
    Completed: 'COMPLETED',
    NotCompleted: 'NOT_COMPLETED'
} as const;

export type AssignmentGroupStatus = typeof AssignmentGroupStatus[keyof typeof AssignmentGroupStatus];


/**
 * 
 * @export
 * @interface AssignmentGroupSubmitDetailsDto
 */
export interface AssignmentGroupSubmitDetailsDto {
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'assignmentId': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'studentUsername': string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'studentId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'successRate': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'attemptCount': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'students'?: Array<number> | null;
    /**
     * 
     * @type {AssignmentGroupStatus}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'status': AssignmentGroupStatus;
    /**
     * 
     * @type {string}
     * @memberof AssignmentGroupSubmitDetailsDto
     */
    'lastSubmit'?: string | null;
}


/**
 * 
 * @export
 * @interface ClassDto
 */
export interface ClassDto {
    /**
     * 
     * @type {number}
     * @memberof ClassDto
     */
    'classId': number;
    /**
     * 
     * @type {string}
     * @memberof ClassDto
     */
    'className': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ClassDto
     */
    'teachers': Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClassDto
     */
    'teacherUsernames': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateAssignmentGroupReq
 */
export interface CreateAssignmentGroupReq {
    /**
     * 
     * @type {string}
     * @memberof CreateAssignmentGroupReq
     */
    'assignmentGroupName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssignmentGroupReq
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateAssignmentGroupReq
     */
    'numberOfRecords': number;
    /**
     * 
     * @type {number}
     * @memberof CreateAssignmentGroupReq
     */
    'possibleAttempts': number;
    /**
     * 
     * @type {number}
     * @memberof CreateAssignmentGroupReq
     */
    'classId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateAssignmentGroupReq
     */
    'students'?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAssignmentGroupReq
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssignmentGroupReq
     */
    'deadline': string;
}
/**
 * 
 * @export
 * @interface CreateAssignmentGroupRes
 */
export interface CreateAssignmentGroupRes {
    /**
     * 
     * @type {number}
     * @memberof CreateAssignmentGroupRes
     */
    'assignmentGroupId': number;
}
/**
 * 
 * @export
 * @interface CreateClassReq
 */
export interface CreateClassReq {
    /**
     * 
     * @type {string}
     * @memberof CreateClassReq
     */
    'className': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateClassReq
     */
    'teachers'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface CreateClassRes
 */
export interface CreateClassRes {
    /**
     * 
     * @type {number}
     * @memberof CreateClassRes
     */
    'classId': number;
}
/**
 * 
 * @export
 * @interface DashboardResBase
 */
export interface DashboardResBase {
    /**
     * 
     * @type {string}
     * @memberof DashboardResBase
     */
    'institutionName'?: string | null;
}
/**
 * 
 * @export
 * @interface DeleteAssignmentGroupsReq
 */
export interface DeleteAssignmentGroupsReq {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteAssignmentGroupsReq
     */
    'assignmentGroupIds': Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteClassesReq
 */
export interface DeleteClassesReq {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteClassesReq
     */
    'classIds': Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteUsersReq
 */
export interface DeleteUsersReq {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteUsersReq
     */
    'userIds': Array<number>;
}
/**
 * 
 * @export
 * @interface EditAppSettinReq
 */
export interface EditAppSettinReq {
    /**
     * 
     * @type {number}
     * @memberof EditAppSettinReq
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EditAppSettinReq
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditAppSettinReq
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface EditAssignmentGroupsReq
 */
export interface EditAssignmentGroupsReq {
    /**
     * 
     * @type {number}
     * @memberof EditAssignmentGroupsReq
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EditAssignmentGroupsReq
     */
    'assignmentGroupName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditAssignmentGroupsReq
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EditAssignmentGroupsReq
     */
    'possibleAttempts'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof EditAssignmentGroupsReq
     */
    'students'?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof EditAssignmentGroupsReq
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditAssignmentGroupsReq
     */
    'deadline'?: string | null;
}
/**
 * 
 * @export
 * @interface EditClassReq
 */
export interface EditClassReq {
    /**
     * 
     * @type {number}
     * @memberof EditClassReq
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EditClassReq
     */
    'classname'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof EditClassReq
     */
    'teachers'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface EditUserReq
 */
export interface EditUserReq {
    /**
     * 
     * @type {number}
     * @memberof EditUserReq
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EditUserReq
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditUserReq
     */
    'password'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof EditUserReq
     */
    'classIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface LoginReq
 */
export interface LoginReq {
    /**
     * 
     * @type {string}
     * @memberof LoginReq
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginReq
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginRes
 */
export interface LoginRes {
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface QueryAppSettingRes
 */
export interface QueryAppSettingRes {
    /**
     * 
     * @type {Array<AppSettingDto>}
     * @memberof QueryAppSettingRes
     */
    'appSettings': Array<AppSettingDto>;
    /**
     * 
     * @type {number}
     * @memberof QueryAppSettingRes
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface QueryAssignmentDataForSubmitRes
 */
export interface QueryAssignmentDataForSubmitRes {
    /**
     * 
     * @type {Array<number>}
     * @memberof QueryAssignmentDataForSubmitRes
     */
    'hostsPerNetwork': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentDataForSubmitRes
     */
    'cidr': string;
    /**
     * 
     * @type {boolean}
     * @memberof QueryAssignmentDataForSubmitRes
     */
    'isAvailableForSubmission': boolean;
}
/**
 * 
 * @export
 * @interface QueryAssignmentGroupDetailsRes
 */
export interface QueryAssignmentGroupDetailsRes {
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'assignmentGroupId': number;
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'assignmentGroupName': string;
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'assignmentGroupDescription'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'classId': number;
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'className': string;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'submitted': number;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'total': number;
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'deadline': string;
    /**
     * 
     * @type {AssignmentGroupStatus}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'submissionStatus': AssignmentGroupStatus;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'successRate': number;
    /**
     * 
     * @type {AssignmentGroupState}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'state': AssignmentGroupState;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'numberOfRecords': number;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'possibleAttempts': number;
    /**
     * 
     * @type {Array<AssignmentGroupSubmitDetailsDto>}
     * @memberof QueryAssignmentGroupDetailsRes
     */
    'assignments': Array<AssignmentGroupSubmitDetailsDto>;
}


/**
 * 
 * @export
 * @interface QueryAssignmentGroupsRes
 */
export interface QueryAssignmentGroupsRes {
    /**
     * 
     * @type {Array<AssignmentGroupDto>}
     * @memberof QueryAssignmentGroupsRes
     */
    'assignmentGroups': Array<AssignmentGroupDto>;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentGroupsRes
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface QueryAssignmentSubmitDetailsFullAnswerField
 */
export interface QueryAssignmentSubmitDetailsFullAnswerField {
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentSubmitDetailsFullAnswerField
     */
    'submitted'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentSubmitDetailsFullAnswerField
     */
    'correct': string;
}
/**
 * 
 * @export
 * @interface QueryAssignmentSubmitDetailsFullRecordField
 */
export interface QueryAssignmentSubmitDetailsFullRecordField {
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentSubmitDetailsFullRecordField
     */
    'hosts': number;
    /**
     * 
     * @type {QueryAssignmentSubmitDetailsFullAnswerField}
     * @memberof QueryAssignmentSubmitDetailsFullRecordField
     */
    'network': QueryAssignmentSubmitDetailsFullAnswerField;
    /**
     * 
     * @type {QueryAssignmentSubmitDetailsFullAnswerField}
     * @memberof QueryAssignmentSubmitDetailsFullRecordField
     */
    'firstUsable': QueryAssignmentSubmitDetailsFullAnswerField;
    /**
     * 
     * @type {QueryAssignmentSubmitDetailsFullAnswerField}
     * @memberof QueryAssignmentSubmitDetailsFullRecordField
     */
    'lastUsable': QueryAssignmentSubmitDetailsFullAnswerField;
    /**
     * 
     * @type {QueryAssignmentSubmitDetailsFullAnswerField}
     * @memberof QueryAssignmentSubmitDetailsFullRecordField
     */
    'broadcast': QueryAssignmentSubmitDetailsFullAnswerField;
}
/**
 * 
 * @export
 * @interface QueryAssignmentSubmitDetailsFullRes
 */
export interface QueryAssignmentSubmitDetailsFullRes {
    /**
     * 
     * @type {string}
     * @memberof QueryAssignmentSubmitDetailsFullRes
     */
    'assignmentGroupName': string;
    /**
     * 
     * @type {Array<QueryAssignmentSubmitDetailsFullRecordField>}
     * @memberof QueryAssignmentSubmitDetailsFullRes
     */
    'results': Array<QueryAssignmentSubmitDetailsFullRecordField>;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentSubmitDetailsFullRes
     */
    'numberOfSubmits': number;
}
/**
 * 
 * @export
 * @interface QueryAssignmentsRes
 */
export interface QueryAssignmentsRes {
    /**
     * 
     * @type {Array<AssignmentDto>}
     * @memberof QueryAssignmentsRes
     */
    'assignments'?: Array<AssignmentDto>;
    /**
     * 
     * @type {number}
     * @memberof QueryAssignmentsRes
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface QueryClassesRes
 */
export interface QueryClassesRes {
    /**
     * 
     * @type {Array<ClassDto>}
     * @memberof QueryClassesRes
     */
    'classes': Array<ClassDto>;
    /**
     * 
     * @type {number}
     * @memberof QueryClassesRes
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface QueryTeacherDashboardRes
 */
export interface QueryTeacherDashboardRes {
    /**
     * 
     * @type {string}
     * @memberof QueryTeacherDashboardRes
     */
    'institutionName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QueryTeacherDashboardRes
     */
    'lastSubmitUsername'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QueryTeacherDashboardRes
     */
    'lastSubmitAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QueryTeacherDashboardRes
     */
    'mostSuccessfulClass'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QueryTeacherDashboardRes
     */
    'mostSuccessfulStudent'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof QueryTeacherDashboardRes
     */
    'totalClasses'?: number;
    /**
     * 
     * @type {number}
     * @memberof QueryTeacherDashboardRes
     */
    'totalStudents'?: number;
    /**
     * 
     * @type {Array<TeacherBarChartDataDto>}
     * @memberof QueryTeacherDashboardRes
     */
    'averagePercentageInStudents'?: Array<TeacherBarChartDataDto> | null;
    /**
     * 
     * @type {Array<TeacherBarChartDataDto>}
     * @memberof QueryTeacherDashboardRes
     */
    'averagePercentageInClasses'?: Array<TeacherBarChartDataDto> | null;
}
/**
 * 
 * @export
 * @interface QueryUsersRes
 */
export interface QueryUsersRes {
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof QueryUsersRes
     */
    'users': Array<UserDto>;
    /**
     * 
     * @type {number}
     * @memberof QueryUsersRes
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface SubmitAssignmentField
 */
export interface SubmitAssignmentField {
    /**
     * 
     * @type {string}
     * @memberof SubmitAssignmentField
     */
    'network'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubmitAssignmentField
     */
    'firstUsable'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubmitAssignmentField
     */
    'lastUsable'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubmitAssignmentField
     */
    'broadcast'?: string | null;
}
/**
 * 
 * @export
 * @interface SubmitAssignmentReq
 */
export interface SubmitAssignmentReq {
    /**
     * 
     * @type {number}
     * @memberof SubmitAssignmentReq
     */
    'assignmentId': number;
    /**
     * 
     * @type {Array<SubmitAssignmentField>}
     * @memberof SubmitAssignmentReq
     */
    'data'?: Array<SubmitAssignmentField> | null;
}
/**
 * 
 * @export
 * @interface SubmitAssignmentRes
 */
export interface SubmitAssignmentRes {
    /**
     * 
     * @type {number}
     * @memberof SubmitAssignmentRes
     */
    'assignmentSubmitId': number;
    /**
     * 
     * @type {number}
     * @memberof SubmitAssignmentRes
     */
    'attempt': number;
}
/**
 * 
 * @export
 * @interface TeacherBarChartDataDto
 */
export interface TeacherBarChartDataDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherBarChartDataDto
     */
    'username': string;
    /**
     * 
     * @type {number}
     * @memberof TeacherBarChartDataDto
     */
    'percentage': number;
}
/**
 * 
 * @export
 * @interface UserConflictInfoDto
 */
export interface UserConflictInfoDto {
    /**
     * 
     * @type {string}
     * @memberof UserConflictInfoDto
     */
    'conflictField'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserConflictInfoDto
     */
    'attemptedValue'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'role': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UserDto
     */
    'classIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'classNames'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ValidateTokenReq
 */
export interface ValidateTokenReq {
    /**
     * 
     * @type {string}
     * @memberof ValidateTokenReq
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ValidateTokenRes
 */
export interface ValidateTokenRes {
    /**
     * 
     * @type {boolean}
     * @memberof ValidateTokenRes
     */
    'isValid': boolean;
    /**
     * 
     * @type {string}
     * @memberof ValidateTokenRes
     */
    'role': string;
    /**
     * 
     * @type {number}
     * @memberof ValidateTokenRes
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof ValidateTokenRes
     */
    'username': string;
}

/**
 * AppSettingsApi - axios parameter creator
 * @export
 */
export const AppSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EditAppSettinReq} editAppSettinReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSettingsEditAppSetting: async (editAppSettinReq: EditAppSettinReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editAppSettinReq' is not null or undefined
            assertParamExists('appSettingsEditAppSetting', 'editAppSettinReq', editAppSettinReq)
            const localVarPath = `/api/appsettings/edit-app-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editAppSettinReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSettingsQueryAppSettings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/appsettings/get-app-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppSettingsApi - functional programming interface
 * @export
 */
export const AppSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EditAppSettinReq} editAppSettinReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appSettingsEditAppSetting(editAppSettinReq: EditAppSettinReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appSettingsEditAppSetting(editAppSettinReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppSettingsApi.appSettingsEditAppSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appSettingsQueryAppSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAppSettingRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appSettingsQueryAppSettings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppSettingsApi.appSettingsQueryAppSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppSettingsApi - factory interface
 * @export
 */
export const AppSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppSettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {EditAppSettinReq} editAppSettinReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSettingsEditAppSetting(editAppSettinReq: EditAppSettinReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appSettingsEditAppSetting(editAppSettinReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSettingsQueryAppSettings(options?: RawAxiosRequestConfig): AxiosPromise<QueryAppSettingRes> {
            return localVarFp.appSettingsQueryAppSettings(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppSettingsApi - object-oriented interface
 * @export
 * @class AppSettingsApi
 * @extends {BaseAPI}
 */
export class AppSettingsApi extends BaseAPI {
    /**
     * 
     * @param {EditAppSettinReq} editAppSettinReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingsApi
     */
    public appSettingsEditAppSetting(editAppSettinReq: EditAppSettinReq, options?: RawAxiosRequestConfig) {
        return AppSettingsApiFp(this.configuration).appSettingsEditAppSetting(editAppSettinReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingsApi
     */
    public appSettingsQueryAppSettings(options?: RawAxiosRequestConfig) {
        return AppSettingsApiFp(this.configuration).appSettingsQueryAppSettings(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssignmentApi - axios parameter creator
 * @export
 */
export const AssignmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [assignmentId] 
         * @param {number} [attempt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentQueryAssignmentSubmitDetailsFull: async (assignmentId?: number, attempt?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assignment/get-assignment-submit-details-full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (assignmentId !== undefined) {
                localVarQueryParameter['AssignmentId'] = assignmentId;
            }

            if (attempt !== undefined) {
                localVarQueryParameter['Attempt'] = attempt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentQueryAssignments: async (studentId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assignment/get-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignmentApi - functional programming interface
 * @export
 */
export const AssignmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [assignmentId] 
         * @param {number} [attempt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentQueryAssignmentSubmitDetailsFull(assignmentId?: number, attempt?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAssignmentSubmitDetailsFullRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentQueryAssignmentSubmitDetailsFull(assignmentId, attempt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentApi.assignmentQueryAssignmentSubmitDetailsFull']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentQueryAssignments(studentId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAssignmentsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentQueryAssignments(studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentApi.assignmentQueryAssignments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssignmentApi - factory interface
 * @export
 */
export const AssignmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignmentApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [assignmentId] 
         * @param {number} [attempt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentQueryAssignmentSubmitDetailsFull(assignmentId?: number, attempt?: number, options?: RawAxiosRequestConfig): AxiosPromise<QueryAssignmentSubmitDetailsFullRes> {
            return localVarFp.assignmentQueryAssignmentSubmitDetailsFull(assignmentId, attempt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [studentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentQueryAssignments(studentId?: number, options?: RawAxiosRequestConfig): AxiosPromise<QueryAssignmentsRes> {
            return localVarFp.assignmentQueryAssignments(studentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignmentApi - object-oriented interface
 * @export
 * @class AssignmentApi
 * @extends {BaseAPI}
 */
export class AssignmentApi extends BaseAPI {
    /**
     * 
     * @param {number} [assignmentId] 
     * @param {number} [attempt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public assignmentQueryAssignmentSubmitDetailsFull(assignmentId?: number, attempt?: number, options?: RawAxiosRequestConfig) {
        return AssignmentApiFp(this.configuration).assignmentQueryAssignmentSubmitDetailsFull(assignmentId, attempt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [studentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public assignmentQueryAssignments(studentId?: number, options?: RawAxiosRequestConfig) {
        return AssignmentApiFp(this.configuration).assignmentQueryAssignments(studentId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssignmentGroupApi - axios parameter creator
 * @export
 */
export const AssignmentGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAssignmentGroupReq} createAssignmentGroupReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupCreateAssignmentGroup: async (createAssignmentGroupReq: CreateAssignmentGroupReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAssignmentGroupReq' is not null or undefined
            assertParamExists('assignmentGroupCreateAssignmentGroup', 'createAssignmentGroupReq', createAssignmentGroupReq)
            const localVarPath = `/api/assignment-group/create-assignment-group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAssignmentGroupReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteAssignmentGroupsReq} deleteAssignmentGroupsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupDeleteAssignmentGroups: async (deleteAssignmentGroupsReq: DeleteAssignmentGroupsReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteAssignmentGroupsReq' is not null or undefined
            assertParamExists('assignmentGroupDeleteAssignmentGroups', 'deleteAssignmentGroupsReq', deleteAssignmentGroupsReq)
            const localVarPath = `/api/assignment-group/delete-assignment-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteAssignmentGroupsReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditAssignmentGroupsReq} editAssignmentGroupsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupEditAssignmentGroups: async (editAssignmentGroupsReq: EditAssignmentGroupsReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editAssignmentGroupsReq' is not null or undefined
            assertParamExists('assignmentGroupEditAssignmentGroups', 'editAssignmentGroupsReq', editAssignmentGroupsReq)
            const localVarPath = `/api/assignment-group/edit-assignment-group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editAssignmentGroupsReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [assignmentGroupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupQueryAssignmentGroupDetails: async (assignmentGroupId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assignment-group/get-assignment-group-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (assignmentGroupId !== undefined) {
                localVarQueryParameter['AssignmentGroupId'] = assignmentGroupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} [assignmentGroupName] 
         * @param {number | null} [classId] 
         * @param {number | null} [teacherId] 
         * @param {AssignmentGroupState} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupQueryAssignmentGroups: async (assignmentGroupName?: string | null, classId?: number | null, teacherId?: number | null, state?: AssignmentGroupState, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assignment-group/get-assignment-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (assignmentGroupName !== undefined) {
                localVarQueryParameter['AssignmentGroupName'] = assignmentGroupName;
            }

            if (classId !== undefined) {
                localVarQueryParameter['ClassId'] = classId;
            }

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignmentGroupApi - functional programming interface
 * @export
 */
export const AssignmentGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignmentGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAssignmentGroupReq} createAssignmentGroupReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentGroupCreateAssignmentGroup(createAssignmentGroupReq: CreateAssignmentGroupReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAssignmentGroupRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentGroupCreateAssignmentGroup(createAssignmentGroupReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentGroupApi.assignmentGroupCreateAssignmentGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteAssignmentGroupsReq} deleteAssignmentGroupsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentGroupDeleteAssignmentGroups(deleteAssignmentGroupsReq: DeleteAssignmentGroupsReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentGroupDeleteAssignmentGroups(deleteAssignmentGroupsReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentGroupApi.assignmentGroupDeleteAssignmentGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EditAssignmentGroupsReq} editAssignmentGroupsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentGroupEditAssignmentGroups(editAssignmentGroupsReq: EditAssignmentGroupsReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentGroupEditAssignmentGroups(editAssignmentGroupsReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentGroupApi.assignmentGroupEditAssignmentGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [assignmentGroupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentGroupQueryAssignmentGroupDetails(assignmentGroupId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAssignmentGroupDetailsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentGroupQueryAssignmentGroupDetails(assignmentGroupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentGroupApi.assignmentGroupQueryAssignmentGroupDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} [assignmentGroupName] 
         * @param {number | null} [classId] 
         * @param {number | null} [teacherId] 
         * @param {AssignmentGroupState} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentGroupQueryAssignmentGroups(assignmentGroupName?: string | null, classId?: number | null, teacherId?: number | null, state?: AssignmentGroupState, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAssignmentGroupsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentGroupQueryAssignmentGroups(assignmentGroupName, classId, teacherId, state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentGroupApi.assignmentGroupQueryAssignmentGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssignmentGroupApi - factory interface
 * @export
 */
export const AssignmentGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignmentGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateAssignmentGroupReq} createAssignmentGroupReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupCreateAssignmentGroup(createAssignmentGroupReq: CreateAssignmentGroupReq, options?: RawAxiosRequestConfig): AxiosPromise<CreateAssignmentGroupRes> {
            return localVarFp.assignmentGroupCreateAssignmentGroup(createAssignmentGroupReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteAssignmentGroupsReq} deleteAssignmentGroupsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupDeleteAssignmentGroups(deleteAssignmentGroupsReq: DeleteAssignmentGroupsReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignmentGroupDeleteAssignmentGroups(deleteAssignmentGroupsReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditAssignmentGroupsReq} editAssignmentGroupsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupEditAssignmentGroups(editAssignmentGroupsReq: EditAssignmentGroupsReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignmentGroupEditAssignmentGroups(editAssignmentGroupsReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [assignmentGroupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupQueryAssignmentGroupDetails(assignmentGroupId?: number, options?: RawAxiosRequestConfig): AxiosPromise<QueryAssignmentGroupDetailsRes> {
            return localVarFp.assignmentGroupQueryAssignmentGroupDetails(assignmentGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} [assignmentGroupName] 
         * @param {number | null} [classId] 
         * @param {number | null} [teacherId] 
         * @param {AssignmentGroupState} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentGroupQueryAssignmentGroups(assignmentGroupName?: string | null, classId?: number | null, teacherId?: number | null, state?: AssignmentGroupState, options?: RawAxiosRequestConfig): AxiosPromise<QueryAssignmentGroupsRes> {
            return localVarFp.assignmentGroupQueryAssignmentGroups(assignmentGroupName, classId, teacherId, state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignmentGroupApi - object-oriented interface
 * @export
 * @class AssignmentGroupApi
 * @extends {BaseAPI}
 */
export class AssignmentGroupApi extends BaseAPI {
    /**
     * 
     * @param {CreateAssignmentGroupReq} createAssignmentGroupReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentGroupApi
     */
    public assignmentGroupCreateAssignmentGroup(createAssignmentGroupReq: CreateAssignmentGroupReq, options?: RawAxiosRequestConfig) {
        return AssignmentGroupApiFp(this.configuration).assignmentGroupCreateAssignmentGroup(createAssignmentGroupReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteAssignmentGroupsReq} deleteAssignmentGroupsReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentGroupApi
     */
    public assignmentGroupDeleteAssignmentGroups(deleteAssignmentGroupsReq: DeleteAssignmentGroupsReq, options?: RawAxiosRequestConfig) {
        return AssignmentGroupApiFp(this.configuration).assignmentGroupDeleteAssignmentGroups(deleteAssignmentGroupsReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditAssignmentGroupsReq} editAssignmentGroupsReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentGroupApi
     */
    public assignmentGroupEditAssignmentGroups(editAssignmentGroupsReq: EditAssignmentGroupsReq, options?: RawAxiosRequestConfig) {
        return AssignmentGroupApiFp(this.configuration).assignmentGroupEditAssignmentGroups(editAssignmentGroupsReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [assignmentGroupId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentGroupApi
     */
    public assignmentGroupQueryAssignmentGroupDetails(assignmentGroupId?: number, options?: RawAxiosRequestConfig) {
        return AssignmentGroupApiFp(this.configuration).assignmentGroupQueryAssignmentGroupDetails(assignmentGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} [assignmentGroupName] 
     * @param {number | null} [classId] 
     * @param {number | null} [teacherId] 
     * @param {AssignmentGroupState} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentGroupApi
     */
    public assignmentGroupQueryAssignmentGroups(assignmentGroupName?: string | null, classId?: number | null, teacherId?: number | null, state?: AssignmentGroupState, options?: RawAxiosRequestConfig) {
        return AssignmentGroupApiFp(this.configuration).assignmentGroupQueryAssignmentGroups(assignmentGroupName, classId, teacherId, state, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssignmentSubmitApi - axios parameter creator
 * @export
 */
export const AssignmentSubmitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentSubmitQueryAssignmentDataForSubmit: async (assignmentId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assignment/get-assignment-data-for-submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (assignmentId !== undefined) {
                localVarQueryParameter['AssignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitAssignmentReq} submitAssignmentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentSubmitSubmitAssignment: async (submitAssignmentReq: SubmitAssignmentReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitAssignmentReq' is not null or undefined
            assertParamExists('assignmentSubmitSubmitAssignment', 'submitAssignmentReq', submitAssignmentReq)
            const localVarPath = `/api/assignment/submit-assignment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitAssignmentReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignmentSubmitApi - functional programming interface
 * @export
 */
export const AssignmentSubmitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignmentSubmitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentSubmitQueryAssignmentDataForSubmit(assignmentId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAssignmentDataForSubmitRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentSubmitQueryAssignmentDataForSubmit(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentSubmitApi.assignmentSubmitQueryAssignmentDataForSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SubmitAssignmentReq} submitAssignmentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignmentSubmitSubmitAssignment(submitAssignmentReq: SubmitAssignmentReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitAssignmentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignmentSubmitSubmitAssignment(submitAssignmentReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentSubmitApi.assignmentSubmitSubmitAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssignmentSubmitApi - factory interface
 * @export
 */
export const AssignmentSubmitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignmentSubmitApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentSubmitQueryAssignmentDataForSubmit(assignmentId?: number, options?: RawAxiosRequestConfig): AxiosPromise<QueryAssignmentDataForSubmitRes> {
            return localVarFp.assignmentSubmitQueryAssignmentDataForSubmit(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubmitAssignmentReq} submitAssignmentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignmentSubmitSubmitAssignment(submitAssignmentReq: SubmitAssignmentReq, options?: RawAxiosRequestConfig): AxiosPromise<SubmitAssignmentRes> {
            return localVarFp.assignmentSubmitSubmitAssignment(submitAssignmentReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignmentSubmitApi - object-oriented interface
 * @export
 * @class AssignmentSubmitApi
 * @extends {BaseAPI}
 */
export class AssignmentSubmitApi extends BaseAPI {
    /**
     * 
     * @param {number} [assignmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentSubmitApi
     */
    public assignmentSubmitQueryAssignmentDataForSubmit(assignmentId?: number, options?: RawAxiosRequestConfig) {
        return AssignmentSubmitApiFp(this.configuration).assignmentSubmitQueryAssignmentDataForSubmit(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubmitAssignmentReq} submitAssignmentReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentSubmitApi
     */
    public assignmentSubmitSubmitAssignment(submitAssignmentReq: SubmitAssignmentReq, options?: RawAxiosRequestConfig) {
        return AssignmentSubmitApiFp(this.configuration).assignmentSubmitSubmitAssignment(submitAssignmentReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginReq} loginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin: async (loginReq: LoginReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginReq' is not null or undefined
            assertParamExists('authLogin', 'loginReq', loginReq)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ValidateTokenReq} validateTokenReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authValidateToken: async (validateTokenReq: ValidateTokenReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validateTokenReq' is not null or undefined
            assertParamExists('authValidateToken', 'validateTokenReq', validateTokenReq)
            const localVarPath = `/api/auth/validate-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validateTokenReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginReq} loginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogin(loginReq: LoginReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(loginReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ValidateTokenReq} validateTokenReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authValidateToken(validateTokenReq: ValidateTokenReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateTokenRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authValidateToken(validateTokenReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authValidateToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginReq} loginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(loginReq: LoginReq, options?: RawAxiosRequestConfig): AxiosPromise<LoginRes> {
            return localVarFp.authLogin(loginReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ValidateTokenReq} validateTokenReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authValidateToken(validateTokenReq: ValidateTokenReq, options?: RawAxiosRequestConfig): AxiosPromise<ValidateTokenRes> {
            return localVarFp.authValidateToken(validateTokenReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginReq} loginReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogin(loginReq: LoginReq, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogin(loginReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ValidateTokenReq} validateTokenReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authValidateToken(validateTokenReq: ValidateTokenReq, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authValidateToken(validateTokenReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClassApi - axios parameter creator
 * @export
 */
export const ClassApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateClassReq} createClassReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classCreateClass: async (createClassReq: CreateClassReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClassReq' is not null or undefined
            assertParamExists('classCreateClass', 'createClassReq', createClassReq)
            const localVarPath = `/api/classes/create-class`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClassReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteClassesReq} deleteClassesReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classDeleteClasses: async (deleteClassesReq: DeleteClassesReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteClassesReq' is not null or undefined
            assertParamExists('classDeleteClasses', 'deleteClassesReq', deleteClassesReq)
            const localVarPath = `/api/classes/delete-classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteClassesReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditClassReq} editClassReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classEditClass: async (editClassReq: EditClassReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editClassReq' is not null or undefined
            assertParamExists('classEditClass', 'editClassReq', editClassReq)
            const localVarPath = `/api/classes/edit-class`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editClassReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number | null} [classId] 
         * @param {string | null} [className] 
         * @param {number | null} [teacherId] 
         * @param {string | null} [teacherUsername] 
         * @param {boolean | null} [descending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classQueryClasses: async (classId?: number | null, className?: string | null, teacherId?: number | null, teacherUsername?: string | null, descending?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/classes/get-classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (classId !== undefined) {
                localVarQueryParameter['ClassId'] = classId;
            }

            if (className !== undefined) {
                localVarQueryParameter['ClassName'] = className;
            }

            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (teacherUsername !== undefined) {
                localVarQueryParameter['TeacherUsername'] = teacherUsername;
            }

            if (descending !== undefined) {
                localVarQueryParameter['Descending'] = descending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassApi - functional programming interface
 * @export
 */
export const ClassApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateClassReq} createClassReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classCreateClass(createClassReq: CreateClassReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateClassRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classCreateClass(createClassReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classCreateClass']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteClassesReq} deleteClassesReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classDeleteClasses(deleteClassesReq: DeleteClassesReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classDeleteClasses(deleteClassesReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classDeleteClasses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EditClassReq} editClassReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classEditClass(editClassReq: EditClassReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classEditClass(editClassReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classEditClass']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number | null} [classId] 
         * @param {string | null} [className] 
         * @param {number | null} [teacherId] 
         * @param {string | null} [teacherUsername] 
         * @param {boolean | null} [descending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classQueryClasses(classId?: number | null, className?: string | null, teacherId?: number | null, teacherUsername?: string | null, descending?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryClassesRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classQueryClasses(classId, className, teacherId, teacherUsername, descending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classQueryClasses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClassApi - factory interface
 * @export
 */
export const ClassApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateClassReq} createClassReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classCreateClass(createClassReq: CreateClassReq, options?: RawAxiosRequestConfig): AxiosPromise<CreateClassRes> {
            return localVarFp.classCreateClass(createClassReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteClassesReq} deleteClassesReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classDeleteClasses(deleteClassesReq: DeleteClassesReq, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.classDeleteClasses(deleteClassesReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditClassReq} editClassReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classEditClass(editClassReq: EditClassReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.classEditClass(editClassReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number | null} [classId] 
         * @param {string | null} [className] 
         * @param {number | null} [teacherId] 
         * @param {string | null} [teacherUsername] 
         * @param {boolean | null} [descending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classQueryClasses(classId?: number | null, className?: string | null, teacherId?: number | null, teacherUsername?: string | null, descending?: boolean | null, options?: RawAxiosRequestConfig): AxiosPromise<QueryClassesRes> {
            return localVarFp.classQueryClasses(classId, className, teacherId, teacherUsername, descending, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassApi - object-oriented interface
 * @export
 * @class ClassApi
 * @extends {BaseAPI}
 */
export class ClassApi extends BaseAPI {
    /**
     * 
     * @param {CreateClassReq} createClassReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classCreateClass(createClassReq: CreateClassReq, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classCreateClass(createClassReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteClassesReq} deleteClassesReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classDeleteClasses(deleteClassesReq: DeleteClassesReq, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classDeleteClasses(deleteClassesReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditClassReq} editClassReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classEditClass(editClassReq: EditClassReq, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classEditClass(editClassReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number | null} [classId] 
     * @param {string | null} [className] 
     * @param {number | null} [teacherId] 
     * @param {string | null} [teacherUsername] 
     * @param {boolean | null} [descending] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classQueryClasses(classId?: number | null, className?: string | null, teacherId?: number | null, teacherUsername?: string | null, descending?: boolean | null, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classQueryClasses(classId, className, teacherId, teacherUsername, descending, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [barChartLength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardQueryTeacherDashboard: async (barChartLength?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/get-teacher-dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (barChartLength !== undefined) {
                localVarQueryParameter['BarChartLength'] = barChartLength;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [barChartLength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardQueryTeacherDashboard(barChartLength?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryTeacherDashboardRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardQueryTeacherDashboard(barChartLength, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.dashboardQueryTeacherDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [barChartLength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardQueryTeacherDashboard(barChartLength?: number, options?: RawAxiosRequestConfig): AxiosPromise<QueryTeacherDashboardRes> {
            return localVarFp.dashboardQueryTeacherDashboard(barChartLength, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * 
     * @param {number} [barChartLength] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public dashboardQueryTeacherDashboard(barChartLength?: number, options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).dashboardQueryTeacherDashboard(barChartLength, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddUserReq} addUserReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAddUser: async (addUserReq: AddUserReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addUserReq' is not null or undefined
            assertParamExists('userAddUser', 'addUserReq', addUserReq)
            const localVarPath = `/api/users/add-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUsersReq} deleteUsersReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDeleteUsers: async (deleteUsersReq: DeleteUsersReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUsersReq' is not null or undefined
            assertParamExists('userDeleteUsers', 'deleteUsersReq', deleteUsersReq)
            const localVarPath = `/api/users/delete-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUsersReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUserReq} editUserReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEditUser: async (editUserReq: EditUserReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUserReq' is not null or undefined
            assertParamExists('userEditUser', 'editUserReq', editUserReq)
            const localVarPath = `/api/users/edit-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUserReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number | null} [userId] 
         * @param {string | null} [username] 
         * @param {string | null} [role] 
         * @param {number | null} [classId] 
         * @param {string | null} [className] 
         * @param {boolean | null} [descending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userQueryUsers: async (userId?: number | null, username?: string | null, role?: string | null, classId?: number | null, className?: string | null, descending?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/get-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (username !== undefined) {
                localVarQueryParameter['Username'] = username;
            }

            if (role !== undefined) {
                localVarQueryParameter['Role'] = role;
            }

            if (classId !== undefined) {
                localVarQueryParameter['ClassId'] = classId;
            }

            if (className !== undefined) {
                localVarQueryParameter['ClassName'] = className;
            }

            if (descending !== undefined) {
                localVarQueryParameter['Descending'] = descending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddUserReq} addUserReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAddUser(addUserReq: AddUserReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddUserRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAddUser(addUserReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userAddUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteUsersReq} deleteUsersReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDeleteUsers(deleteUsersReq: DeleteUsersReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userDeleteUsers(deleteUsersReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userDeleteUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EditUserReq} editUserReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userEditUser(editUserReq: EditUserReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userEditUser(editUserReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userEditUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number | null} [userId] 
         * @param {string | null} [username] 
         * @param {string | null} [role] 
         * @param {number | null} [classId] 
         * @param {string | null} [className] 
         * @param {boolean | null} [descending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userQueryUsers(userId?: number | null, username?: string | null, role?: string | null, classId?: number | null, className?: string | null, descending?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryUsersRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userQueryUsers(userId, username, role, classId, className, descending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userQueryUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {AddUserReq} addUserReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAddUser(addUserReq: AddUserReq, options?: RawAxiosRequestConfig): AxiosPromise<AddUserRes> {
            return localVarFp.userAddUser(addUserReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUsersReq} deleteUsersReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDeleteUsers(deleteUsersReq: DeleteUsersReq, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.userDeleteUsers(deleteUsersReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUserReq} editUserReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEditUser(editUserReq: EditUserReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userEditUser(editUserReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number | null} [userId] 
         * @param {string | null} [username] 
         * @param {string | null} [role] 
         * @param {number | null} [classId] 
         * @param {string | null} [className] 
         * @param {boolean | null} [descending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userQueryUsers(userId?: number | null, username?: string | null, role?: string | null, classId?: number | null, className?: string | null, descending?: boolean | null, options?: RawAxiosRequestConfig): AxiosPromise<QueryUsersRes> {
            return localVarFp.userQueryUsers(userId, username, role, classId, className, descending, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {AddUserReq} addUserReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userAddUser(addUserReq: AddUserReq, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userAddUser(addUserReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUsersReq} deleteUsersReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userDeleteUsers(deleteUsersReq: DeleteUsersReq, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userDeleteUsers(deleteUsersReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUserReq} editUserReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userEditUser(editUserReq: EditUserReq, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userEditUser(editUserReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number | null} [userId] 
     * @param {string | null} [username] 
     * @param {string | null} [role] 
     * @param {number | null} [classId] 
     * @param {string | null} [className] 
     * @param {boolean | null} [descending] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userQueryUsers(userId?: number | null, username?: string | null, role?: string | null, classId?: number | null, className?: string | null, descending?: boolean | null, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userQueryUsers(userId, username, role, classId, className, descending, options).then((request) => request(this.axios, this.basePath));
    }
}



